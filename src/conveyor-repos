function resource_usage() {
    if [ x"$1" != x"" ]; then
	echo $1 >&2
	echo >&2
    fi

    echo "usage: con repos [init [--github] <repo-name>|create-test|delete-test]|[help [action]]"
    echo
    echo "Available actions:"
    echo "   init        Initializes a new repository."
    echo "   create-test Creates a test repository."
    echo "   delete-test Deletes the current test repository."
}

function resource_help() {
    if [ $# -lt 1 ]; then
	resource_usage
    else
	local ACTION="$1"; shift
	case "$ACTION" in
	    init)
		echo "Usage: con repos init [--github]"
		echo
		echo "Used to initialize a new origin repository for conveyor-workflow. This is a"
		echo "standard git repository with the 'master' branch pre-populated with"
		echo "a README.repo file."
		echo
		echo "The '--github' variant will set up the named repo on github under the"
		echo "configured account."
		;;
	    create-test)
		echo "Usage: con repos create-test"
		echo
		echo "Creates a bare local reposiotry 'manual-test-repo' and ties it to a github"
		echo "repository."
		;;
	    delete-test)
		echo "Usage: con repos delete-test"
		echo
		echo "Removes the local and github test repositories created by 'con repos create-test'."
		;;
	    *)
		resource_usage "Unknown action: '$ACTION'."
		exit 1;;
	esac
    fi
}

function process() {
    local VERB="$1"; shift

    case "$VERB" in
	help)
	    resource_usage
	    exit 0;;
	init)
	    init_repo "$@";;
	create-test)
	    create_test_repo;;
	delete-test)
	    delete_test_repo;;
	*)
	    echo "Unknown verb '$VERB'." >&2
	    return 1;;
    esac
}

function init_repo() {
    local GITHUB=1 # bash for false ; default
    # The 'g' option is not really supporte,d but I believe getopt requires at
    # least one short option.
    ARGS=$(getopt -o g -l "github" -n "conveyor-repos:init_repo" -- "$@");
    if [ $? -ne 0 ]; then #Bad arguments
	return 1
    fi
    eval set -- "$ARGS"
    while [ "$1" != '--' ]; do
	case "$1" in
	    --github)
		GITHUB="0";;
	esac
	shift
    done
    shift # remove the '--'

    if [ $# -ne 1 ]; then
	resource_usage "'init' requires single parameter, the repo name."
	return 1
    fi

    local REPO_NAME="$1"; shift
    generic_name_tests "$REPO_NAME"

    if [ $GITHUB -eq 0 ]; then
	setup_github_repo "$REPO_NAME"
    else
	setup_local_repo "$REPO_NAME"
    fi
}

function setup_local_repo() {
    REPO_NAME="$1"; shift

    mkdir ${REPO_NAME}.git
    cd ${REPO_NAME}.git
    # Notice this is not a bare repo; we want to be able to do merges and
    # other git operations from the repo.
    git init --quiet .
    setup_minimal_conveyor_files
    cd ..
}

function setup_github_repo() {
    REPO_NAME="$1"; shift

    source $HOME/.conveyor-workflow/github
    source $CONVEYOR_WORKFLOW_RUNNABLE/lib/github-hooks.sh

    # First, we check if the repo exists or not.
    if ! does_repo_exist "$REPO_NAME"; then
	echo "No such repo '$REPO_NAME' exists on github. We currently " >&2
	echo "only support configuration of existing repos. Bailing out." >&2
	exit 1
    fi
    # There is an existing repository, let's configure it.
    local LABELS
    source $CONVEYOR_WORKFLOW_RUNNABLE/lib/standard-issue-labels.sh
    local LABEL
    for LABEL in "${LABELS[@]}"; do
	local NAME=`echo $LABEL | cut -d# -f1`
	local COLOR=`echo $LABEL | cut -d# -f2`
	github_api GET "/repos/$REPO_NAME/labels/$NAME" > /dev/null 2> /dev/null
	local RESULT=$?
	if [ $RESULT -ne 0 ] || [ x`last_rest_status` == x"404" ]; then
	    github_api POST "/repos/$REPO_NAME/labels" "{\"name\": \"$NAME\", \"color\": \"$COLOR\" }" > /dev/null
	fi
    done
    # We now clear out the (at the time of writing) default GitHub issue
    # labels. Notice we DO NOT clear all labels. See
    # https://github.com/DogFoodSoftware/conveyor-workflow/issues/125
    local GITHUB_DEFAULT_LABELS=(
	'bug'
	'duplicate'
	'enhancement'
	'help wanted'
	'invalid'
	'question'
	'wontfix');
    for LABEL in "${GITHUB_DEFAULT_LABELS[@]}"; do
	github_api GET "/repos/$REPO_NAME/labels/$NAME" > /dev/null 2> /dev/null
	local RESULT=$?
	if [ $RESULT == 0 ] && [ x`last_rest_status` == x"200" ]; then
	    github_api DELETE "/repos/$REPO_NAME/labels/$LABEL"
	fi
    done

    cd $CONVEYOR_HOME/workflow/data/
    local TMP_DIR="$RANDOM"
    mkdir $TMP_DIR
    cd $TMP_DIR
    local CLONE_URL="https://github.com/${REPO_NAME}.git"
    if ! do_clone "$CLONE_URL"; then
	exit 2
    fi
    
    cd `basename "$REPO_NAME"`
    setup_minimal_conveyor_files
    git push --quiet origin master
    cd ../..
    rm -rf $TMP_DIR
}

function setup_minimal_conveyor_files() {
    cat <<EOF > README.repo
This is a conveyor-workflow repository and is intended for use with conveyor-workflow
porcelain. For further information, please refer to:

http://dogfoodsoftware.com/documentation/conveyor-workflow
EOF
    git add README.repo
    git commit --quiet -m "Initialized conveyor-workflow repo with README.repo file."
}

function create_test_repo() {
    source $HOME/.conveyor/config
    source $HOME/.conveyor-workflow/github
    # This is a bit of a kludge; should pull the repo management stuff into a
    # non-test library and use it in the test code rather than vice-a-versa.
    TEST_BASE=$CONVEYOR_HOME/workflow/tests
    source $CONVEYOR_HOME/workflow/tests/lib/environment-lib.sh
    
    local DATA_DIR=$CONVEYOR_HOME/workflow/data/test
    if [ -e manual-test-repo ]; then
	echo "ERROR: '$DATA_DIR/manual-test-repo' exists. Use 'con repos delete-test' to clear." >&2
	return 1
    fi
    export GIT_CONVEY_TEST_MODE=0 #bash for true
    init_github_test_environment 'manual-test-repo' 'manual-test-repo'
    echo "Test directory initialized. Execute:"
    echo "cd $DATA_DIR/manual-test-repo"
}

function delete_test_repo() {
    source $HOME/.conveyor/config
    source $HOME/.conveyor-workflow/github
    TEST_BASE=$CONVEYOR_HOME/workflow/tests
    local DATA_DIR=$CONVEYOR_HOME/workflow/data/test
    source $CONVEYOR_HOME/workflow/runnable/lib/github-hooks.sh
    
    if does_repo_exist 'DogFoodSoftware/manual-test-repo'; then
	delete_repo 'DogFoodSoftware/manual-test-repo'
    fi

    if [ ! -d "$DATA_DIR/manual-test-repo" ]; then # nothing to do
	return 0
    fi
    # else
    cd $DATA_DIR
    rm -rf 'manual-test-repo'
}
