#!/bin/sh
# /**
#  * <div class="p">
#  *   Script to implement 'releases' management within git. This is an
#  *   extension defined by <a
#  *   href="http://dogfoodsoftware.com/documentation/git-convey">Git
#  *   Convey</a>.
#  * </div>
#  * <div id="Implementation" data-perspective="implementation" class="grid_12 blurbSummary">

resource_usage() {
    if [ x"$1" != x"" ]; then
	echo $1 >&2
	echo
    fi

# no args, list; -l pattern
# note all state changing actions are only long form
# default | -s release branch name: checkout (and create if necessary); warn if
# no '--force' and not on master
# --release
# --tag
# --update update default current | branch name
# --undo release|tag|update (?)

    echo "usage: git convey releases [list [<pattern>]|[start|checkout|update|promote <branch>]]"
    echo "   list      List release branches in this repo. This is the default action."
    echo "   start     Start a new release."
    echo "   checkout  Checkout / switch to an existing release."
    echo "   delete    Removes the local release branch."
    echo "   promote   Move a release from 'testing' to 'production'."
    echo "   sunset    Archives a release."
    echo "   help      Print this help."
    echo
    echo "   '--mark (default)/--nomark' are used to toggle the '*' for the current"
    echo "release branch in the 'list' task."
    echo
    global_help
}

resource_opts() {
    # Going against bash standards, shFlags requires 'nomark' as the long
    # default value.
    DEFINE_boolean 'mark' true "Controls whether the current release branch is marked with a '*' in the 'list' task"
}

resource_help() {
    if [ $# -lt 1 ]; then
	resource_usage
    else
	TASK="$1"; shift
	case "$TASK" in
	    list)
		echo list;;
	    start)
		echo start;;
	    checkout)
		echo checkout;;
	    delete)
		echo delete;;
	    promote)
		echo promote;;
	    sunset)
		echo sunset;;
	    help)
		resource_usage;;
	    *)
		resource_usage "Unknown task '$TASK'."
		exit 1;
	esac
    fi
}

resource_do() {
    if [ $# -lt 1 ]; then
	TASK="list"
    else
	TASK="$1"; shift
    fi
    if [ $# -lt 1 ]; then
	BRANCH_NAME=bar
    else
	BRANCH_NAME="$1"; shift
    fi

    case "$TASK" in
	list)
	    if [ x"${FLAGS_mark}" == x"${FLAGS_FALSE}" ]; then
		FORMAT='echo -n " "; echo "  %(refname:short)";'
	    else
		FORMAT='if [ `git branch | grep "^*" | cut -d" " -f2 ` == %(refname:short) ]; then echo -n "*"; else echo -n " "; fi; echo " %(refname:short)";'
	    fi
	    EVAL=`git for-each-ref --shell --format="$FORMAT" refs/heads/release-*`
	    eval $EVAL
	    ;;
	start)
	    echo start;;
	checkout)
	    echo checkout;;
	delete)
	    echo delete;;
	promote)
	    echo promote;;
	sunset)
	    echo sunset;;
	help)
	    resource_usage;;
	*)
	    resource_usage "Unknown task '$TASK'."
	    exit 1;
    esac
}

#  * </div><!-- #Implementation.blurbSummary -->
