#!/bin/sh
# /**
#  * <div class="p">
#  *   Script to implement 'releases' management within git. This is an
#  *   extension defined by <a
#  *   href="http://dogfoodsoftware.com/documentation/git-convey">Git
#  *   Convey</a>.
#  * </div>
#  * <div id="Implementation" data-perspective="implementation" class="grid_12 blurbSummary">

resource_usage() {
    if [ x"$1" != x"" ]; then
	echo $1 >&2
	echo >&2
    fi

    echo "usage: git convey releases [list [<pattern>]|[start|checkout|commit|publish|delete|promote <branch>]]"
    echo
    echo "Available actions:"
    echo "   list      List release branches. This is the default action."
    echo "   start     Start a new release."
    echo "   checkout  Checkout / switch to an existing release."
    echo "   commit    Commits changes to a release branch."
    echo "   delete    Removes the local release branch."
    echo "   promote   Move a release from 'testing' to 'production'."
    echo "   sunset    Archives a release."
    echo "   help      Print this help."
    echo
    echo "   '--mark (default)/--nomark' are used to toggle the '*' for the current"
    echo "release branch in the 'list' action."
    echo
    global_help
}

resource_opts() {
    # Going against bash standards, shFlags requires 'nomark' as the long
    # default value.
    DEFINE_boolean 'mark' true "Controls whether the current release branch is marked with a '*' in the 'list' action"
}

resource_help() {
    if [ $# -lt 1 ]; then
	resource_usage
    else
	ACTION="$1"; shift
	case "$ACTION" in
	    list)
		echo "Lists the release branches active in the current repository."
		;;
	    start)
		echo "Creates a new release branch and checks it out. The current branch must be"
		echo "'master', which will be updated and used as the source of the new branch."
		echo "The branch must not already exist and the branch name must start with"
		echo "'releases-'."
		;;
	    checkout)
		echo "Checks out and updates an existing release branch."
		;;
	    commit)
		echo "Commits local changes to the local release branch."
		;;
	    publish)
		echo "Pushes changes on the local release branch to the origin repository."
		;;
	    delete)
		echo "Deletes the named release branch from the local repository. To archive"
		echo "a release branch in the shared repository, use 'sunset'."
		;;
	    promote)
		echo "Promotes the release branch to production status by tagging it."
		;;
	    sunset)
		echo "Deletes the named release branch locally and moves it to the archives on the"
		echo "shared repository."
		;;
	    help)
		echo "Meta-help... you're blowing my mind."
		echo
		resource_usage;;
	    *)
		resource_usage "Unknown action: '$ACTION'."
		exit 1;
	esac
    fi
}

resource_do() {
    if [ $# -lt 1 ]; then
	ACTION="list"
    else
	ACTION="$1"; shift
    fi
    if [ $# -ge 1 ]; then
	RESOURCE_NAME="$1"; shift
    fi

    case "$ACTION" in
	list)
	    list_resources release;;
	start)
	    start_branch 'releases' "$RESOURCE_NAME";;
	checkout)
	    checkout_branch 'releases' "$RESOURCE_NAME";;
	commit)
	    commit_branch 'releases' "$RESOURCE_NAME";;
	publish)
	    echo publish;;
	delete)
	    echo delete;;
	promote)
	    echo promote;;
	sunset)
	    echo sunset;;
	help)
	    ACTION="$RESOURCE_NAME"
	    if [ x"$ACTION" == x"" ]; then
		resource_usage
	    else
		resource_help "$ACTION"
	    fi
	    ;;
	*)
	    resource_usage "Unknown action: '$ACTION'."
	    exit 1;
    esac
}
#  * </div><!-- #Implementation.blurbSummary -->
