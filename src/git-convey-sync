resource_usage() {
    if [ x"$1" != x"" ]; then
	echo $1 >&2
	echo >&2
    fi

    echo "usage:"
    echo "  git convey sync"
    echo "  git convey sync <repo URL> [<local repo dir>]"
    echo
    echo "Used to update (1st usage) or clone (2nd usage) a git-convey"
    echo "repository."
    echo
}

resource_do() {
    # First, let's determine whether we're in clone or update mode.
    if [ $# -eq 1 ] || [ $# -eq 2 ]; then # Clone it is.
	local REMOTE_URL="$1"; shift
	if [ $# -eq 1 ]; then
	    local LOCAL_DIR="$1"; shift
	fi

	# We don't support clones within repos, so let's make sure we're not
	# already in a repo.
	local GIT_DIR=`git rev-parse --git-dir`
	# There is one exception: if we're running tests, then we will be
	# working under the git-convey repo, and that's okay.
	if [ x"$GIT_CONVEY_TEST_MODE" != x"0" ] || [[ x"$GIT_DIR" != x*git-convey/.git ]]; then
	    echo "Cannot clone a git-convey repo within an existing repo: '$GIT_DIR'." >&1
	    exit 1
	fi

	# Else, let's attempt the clone.
	if [ x"$LOCAL_DIR" == x"" ];then
	    git clone --quiet $REMOTE_URL
	else
	    git clone --quiet $REMOTE_URL $LOCAL_DIR
	fi
    elif [ $# -eq 0 ]; then
	# With no arguments, we are updating the current repository. Make sure
	# we're in a repository.
	local GIT_DIR=`git rev-parse --git-dir`
	if [ x"$GIT_DIR" == x"" ]; then
	    echo "Attempted update outside of git directory." >&2
	    exit 1
	fi
	# Now make sure that there are no uncommitted changes...
	git update-index -q --refresh
	local EXIT=0
	if ! git diff-files --quiet --; then
	    echo "Found unstaged files in repo." >&2
	    EXIT=1
	fi
	if ! git diff-index --cached --quiet HEAD --; then
	    echo "Found uncommitted changes in the repo." >&2
	    EXIT=1
	fi
	if [ $EXIT -ne 0 ]; then
	    echo "Sync aborted." >&2
	    exit $EXIT
	fi
	# Okay, we are clean, time to move ahead.
	local BRANCH_LIST="git for-each-ref --shell --format='%(refname:short)' refs/heads"
	local BRANCH_PREFIXES="topics- releases-"
	for PREFIX in $BRANCH_PREFIXES; do
	    for BRANCH in `$BRANCH_LIST/${PREFIX}*`; do
		echo "doing $BRANCH"
		BRANCH="${BRANCH%\'\'}"
		BRANCH="${BRANCH#\'\'}"
		# TODO: do this with plumbing
		git checkout -q $BRANCH
		git pull -q origin $BRANCH
	    done
	done
    else
	resource_usage "Unexpected arguments."
	exit 1
    fi # Top level clone / update check.

    echo "Sync complete."
}
