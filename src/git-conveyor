#!/bin/sh
#/**
#  * <div class="p">
#  * 'Controller' script for the <a
#  *   href="http://dogfoodsoftware.com/documentation/conveyor/ref/Branching-Strategy">Conveyor
#  *   branch strategy</a> extensions. Please refer to the branch strategy
#  *   documentation for details on usage.
#  * </div>
#  * <div id="Implementation" data-perspective="implementation" class="grid_12 blurbSummary">
#  *   <div class="blurbTitle">Implementation</div>
#  *   <div class="p">
#  *     This script essentially reads the first argument&mdash;which is
#  *     understood as the resource name&mdash;and then looks for the matching
#  *     <code>git-conveyor-*</code> script to handle the resource action.
#  *   </div>
#  *   <div class="subHeader"><span>Platform Workarounds</span></div>
#  *   <div class="p">
#  *     Thanks to <a href=""></a> <a
#  *     href="https://github.com/nvie/gitflow">GitFlow</a> for these
#  *     workarounds. If you don't like our approach to branch management,
#  *     GitFlow offers a great alternative.
#  *   </div>
#  */

# If in future versions, we want to use shFlags for commandline option
# processing, we will want to set this variable, used by shFlags for
# compatibility purposes. As we don't currently do any option processing, it
# is not necessary.
# if uname -s | egrep -iq 'bsd'; then export EXPR_COMPAT=1; fi

# For Windows, we need to change '\' to '/'.
export GIT_CONVEY_DIR=$(dirname "$(echo "$0" | sed -e 's|\\|/|g')")

# Regularize getopt parsing across Linux platforms.
export POSIXLY_CORRECT=1

#/**
#  *   <div class="subHeader">Helper Functions and Usage Check</div>
#  *   <div class="p">
#  *     It's bash, so helper funtctions have to come first.
#  *   </div>
#  */

global_help() {
    echo "Use 'con help [<resource> [<action>]]' for details and refer to "
    echo "http://dogfoodsoftware.com/documentatione/conveyor/ref/Branching-Strategy for"
    echo "more on the underlying branch strategy which conveyor-workflow implements."
    echo
}

# /**
#  * <div class="subHeader"><span>usage()</span></div>
#  * <div class="p">
#  *   Prints usage information for the <code>conveyor-workflow</code> script. Takes a
#  *   single optional argument, which is interpretted as a string containing
#  *   additional information about whyt he usage is being displayed. The error
#  *   is printed to <code>stderr</code>.
#  * </div>
#  */
usage() {
    if [ x"$1" != x"" ]; then
	echo $1 >&2
	echo >&2
    fi

    echo "usage: con <resource|global action>"
    echo
    echo "Available resources:"
    echo "   topics    Manage topics / topic branches."
    echo "   releases  Manage releases."
    echo
    echo "Available global actions:"
    echo "   sync      Clones and synchronizes local repo with origin."
    echo "   -s        Set implied resource."
    echo "   help      Prints this help."
    echo
    global_help
}

if [ $# -lt 1 ]; then
    usage "Please indicate resource."
    exit 1
fi

#/**
#  * <div class="subHeader"><span>Options Parsing</span></div>
#  */

source "$HOME/.conveyor/config"
source "$GIT_CONVEY_DIR/lib/shflags"
source "$GIT_CONVEY_DIR/common-checks.sh"
source "$GIT_CONVEY_DIR/common-lib.sh"
FLAGS_PARENT="git conveyor"

DEFINE_boolean verbose false 'be verbose => show git commands' 'v'
DEFINE_boolean setresource false 'set implied resource' 's'
DEFINE_boolean test false 'run in test mode'

FLAGS "$@" || exit $?
eval set -- "${FLAGS_ARGV}"

if [ $FLAGS_test -eq $FLAGS_TRUE ]; then
    export GIT_CONVEY_TEST_MODE=$FLAGS_TRUE
fi

#/**
#* <div class="subHeader"><span>Main Logic</span></div>
#* <div class="p">
#*   Normally, we would process the arguments into named variables as a first
#*   step. In this case, the processing differences between 'implied
#*   resources' and 'explicit resources' means we have to do some work to
#*   establish the semantics of teh arguments.
#* </div>
#*/
# Handle the 'set resource' case.
if [ $FLAGS_setresource -eq $FLAGS_TRUE ]; then
    if [ $# -eq 0 ]; then # clear implied resource, if it exists.
	if [ -f $HOME/.conveyor-workflow/implied-resource ]; then
	    rm -f $HOME/.conveyor-workflow/implied-resource
	    echo "Implied resource cleared."
	fi
    elif [ $# -eq 1 ]; then # set implied resource.
	case "$1" in
	    topics|releases|issues)
		echo "$1" > $HOME/.conveyor-workflow/implied-resource
		echo "Resource set as '$1'.";;
	    *)
		echo "Unknown resource '$1'." >&2
		exit 1;;
	esac
    else
	echo "You may only supply a single supplied resource: topics, releases, or issues." >&2
	exit 1
    fi
    exit 0 # If we successfully set resource, then we're done.
fi # 'set-resources' handling

if [ x"$1" == x"help" ]; then
    shift
    if [ $# -eq 0 ]; then
	usage
    else
	RESOURCE="$1"; shift
	source "$GIT_CONVEY_DIR/git-conveyor-$RESOURCE"
	if [ $# -eq 0 ]; then
	    resource_usage
	else
	    ACTION="$1"; shift
	    resource_help $ACTION
	fi
    fi
    exit 0
fi

# We've handled the special cases, now we handle actual requests.
if [ -f $HOME/.conveyor-workflow/implied-resource ]; then
    RESOURCE=`cat $HOME/.conveyor-workflow/implied-resource`
    source "$GIT_CONVEY_DIR/git-conveyor-$RESOURCE"
    if ! action_check "$1"; then
	rm -f $HOME/.conveyor-workflow/implied-resource
	RESOURCE="$1"; shift
    fi
else
    RESOURCE="$1"; shift
fi

if [ ! -f "$GIT_CONVEY_DIR/git-conveyor-$RESOURCE" ]; then
    usage "Unknown resource: '$RESOURCE'."
    exit 1
fi
source "$GIT_CONVEY_DIR/git-conveyor-$RESOURCE"

resource_do "$@"
#/**
#  * </div><!-- #Implementation.blurbSummary -->
#  */
