resource_usage() {
    if [ x"$1" != x"" ]; then
	echo $1 >&2
	echo >&2
    fi

    echo "usage: con init <local repo name>"
    echo "usage: con init --github <github repo name>"
    echo
    echo "Used to initialize a new origin repository for conveyor-workflow. This is a"
    echo "standard git repository with the 'master' branch pre-populated with"
    echo "a README.repo file."
    echo
    echo "The '--github' variant will set up the named repo on github under the"
    echo "configured account."
    echo
    echo "Use 'con sync' to checkout a local working directory."
}

resource_do() {
    FLAGS_PARENT=""
    DEFINE_boolean github false 'Sets up repo on github.' ''
    FLAGS "$@" || exit $?
    eval set -- "${FLAGS_ARGV}"

    if [ $# -ne 1 ]; then
	resource_usage "Unknown usage for 'con init'."
	exit 1
    fi

    local REPO_NAME="$1"; shift

    generic_name_tests "$REPO_NAME"

    # Now read to create the repo.
    if [[ $FLAGS_github -eq $FLAGS_FALSE ]]; then
	setup_local_repo "$REPO_NAME"
    else
	setup_github_repo "$REPO_NAME"
    fi

    # TODO: use 'shell-echo.sh' functions for quite output.
    echo "'$REPO_NAME' initialized."
}

function setup_local_repo() {
    REPO_NAME="$1"; shift

    mkdir ${REPO_NAME}.git
    cd ${REPO_NAME}.git
    # Notice this is not a bare repo; we want to be able to do merges and
    # other git operations from the repo.
    git init --quiet .
    setup_minimal_conveyor_files
    cd ..
}

function setup_github_repo() {
    REPO_NAME="$1"; shift

    source $HOME/.conveyor-workflow/github
    source $GIT_CONVEY_DIR/lib/github-hooks.sh

    # First, we check if the repo exists or not.
    if ! does_repo_exist "$REPO_NAME"; then
	echo "No such repo exists; we currently only support configuration of existing repos. Bailing out." >&2
	exit 1
    fi
    # There is an existing repository, let's configure it.
    local LABELS=('change : bug#ff0000' 'sched : whenever#e0e0e0')
    local LABEL
    for LABEL in "${LABELS[@]}"; do
	local NAME=`echo $LABEL | cut -d# -f1`
	local COLOR=`echo $LABEL | cut -d# -f2`
	local CURL_COMMAND="curl -X POST -s -u $GITHUB_AUTH_TOKEN:x-oauth-basic https://api.github.com/repos/$REPO_NAME/labels -d @-"
	local TMP_FILE="/tmp/$RANDOM"
	cat <<EOF | $CURL_COMMAND > $TMP_FILE
{
  "name": "$NAME",
  "colol": "$COLOR"
}
EOF
	RESULT="$?"
	if [ $RESULT -ne 0 ]; then
	    echo "Request to create label '$NAME' failed; baling out. Re-run or fix manually."
	fi
	local JSON=`cat $TMP_FILE`
	rm $TMP_FILE
    done

    cd $CONVEYOR_HOME/workflow/data/
    local TMP_DIR="$RANDOM"
    mkdir $TMP_DIR
    cd $TMP_DIR
    # We once saw the 'git clone' fail because the repo wasn't yet
    # available... maybe.
    sleep 2
    git clone --quiet "https://github.com/${REPO_NAME}.git" 2>&1 | grep -v "warning: You appear to have cloned an empty repository"
    cd `basename "$REPO_NAME"`
    setup_minimal_conveyor_files
    git push --quiet origin master
    cd ../..
    rm -rf $TMP_DIR
}

function setup_minimal_conveyor_files() {
    cat <<EOF > README.repo
This is a conveyor-workflow repository and is intended for use with conveyor-workflow
porcelain. For further information, please refer to:

http://dogfoodsoftware.com/documentation/conveyor-workflow
EOF
    git add README.repo
    git commit --quiet -m "Initialized conveyor-workflow repo with README.repo file."
}
