resource_usage() {
    if [ x"$1" != x"" ]; then
	echo $1 >&2
	echo >&2
    fi

    echo "usage:"
    echo "  con sync"
    echo "  con sync <repo URL> [<local repo dir>]"
    echo
    echo "Used to update (1st usage) or clone (2nd usage) a conveyor-workflows"
    echo "repository."
    echo
}

resource_do() {
    # First, let's determine whether we're in clone or update mode.
    if [ $# -eq 1 ] || [ $# -eq 2 ]; then # Clone it is.
	local REMOTE_URL="$1"; shift
	if [ $# -eq 1 ]; then
	    local LOCAL_DIR="$1"; shift
	fi

	# We don't support clones within repos, so let's make sure we're not
	# already in a repo.
	local GIT_DIR=`git rev-parse --git-dir`
	# There is one exception: if we're running tests, then we will be
	# working under the conveyor-workflows repo, and that's okay.
	if [ x"$GIT_CONVEY_TEST_MODE" != x"0" ] || [[ x"$GIT_DIR" != x*conveyor-workflows/.git ]]; then
	    echo "Cannot clone a conveyor-workflows repo within an existing repo: '$GIT_DIR'." >&1
	    exit 1
	fi

	# Else, let's attempt the clone.
	if [ x"$LOCAL_DIR" == x"" ];then
	    git clone --quiet $REMOTE_URL
	else
	    git clone --quiet $REMOTE_URL $LOCAL_DIR
	fi
    elif [ $# -eq 0 ]; then
	# With no arguments, we are updating the current repository. Make sure
	# we're in a repository.
	local GIT_DIR=`git rev-parse --git-dir`
	if [ x"$GIT_DIR" == x"" ]; then
	    echo "Attempted update outside of git directory." >&2
	    exit 1
	fi
	# Now make sure that there are no uncommitted changes...
	git update-index -q --refresh
	local EXIT=0
	if ! git diff-files --quiet --; then
	    echo "Found unstaged files in repo." >&2
	    EXIT=1
	fi
	if ! git diff-index --cached --quiet HEAD --; then
	    echo "Found uncommitted changes in the repo." >&2
	    EXIT=1
	fi
	if [ $EXIT -ne 0 ]; then
	    echo "Sync aborted." >&2
	    exit $EXIT
	fi
	# Okay, we are clean, time to move ahead.
	local ORIGINAL_BRANCH=`get_current_branch`
	trap "git checkout -q $ORIGINAL_BRANCH" EXIT
	git fetch -p -q
	if ! update_branch master "$ORIGINAL_BRANCH"; then
	    echo "Could not updated 'master' release branch. Bailing out." >&2
	    exit 2
	fi
	local BRANCH_LIST="git for-each-ref --shell --format='%(refname:short)' refs/heads"
	local BRANCH_PREFIXES="topics- releases-"
	for PREFIX in $BRANCH_PREFIXES; do
	    for BRANCH in `$BRANCH_LIST/${PREFIX}*`; do
		# Git spits out the branches quoted.
		BRANCH="${BRANCH%\'\'}"
		BRANCH="${BRANCH#\'\'}"
		# This method takes care of communicating problems to the user.
		update_branch "$BRANCH" "$ORIGINAL_BRANCH"
	    done
	done
    else
	resource_usage "Unexpected arguments."
	exit 1
    fi # Top level clone / update check.

    echo "Sync complete."
}

function update_branch() {
    local BRANCH="$1"; shift
    local ORIGINAL_BRANCH="$1"; shift

    # TODO: do this with plumbing
    if ! git checkout -q $BRANCH; then
	echo "Very strange; found local branch '$BRANCH' but could not check it out for sync." >&2
	return 2
    fi
    if has_branch_origin "$BRANCH"; then # We sync with origin.
	if ! git pull -q origin $BRANCH; then
	    echo "Could not sync local branch '$BRANCH'. This may be due to network problems." >&2
	    return 2
	fi
    else # The branch does not exist on origin; closed or abandoned?
	# Remember, 'master' has already been synced.
	local RESOURCE=`figure_resource_from_branch "$BRANCH"`
	local RESOURCE_SINGULAR="${RESOURCE%s}"
	local RESOURCE_NAME=`figure_resource_name_from_branch "$BRANCH"`
	local RESOURCE_REF=""
	local SWITCH_ALERT=""
	if [ x"$BRANCH" == x"$ORIGINAL_BRANCH" ]; then
	    RESOURCE_REF="Current ${RESOURCE_SINGULAR}"
	    SWITCH_ALERT=" Switched to master release."
	else
	    RESOURCE_REF="${RESOURCE_SINGULAR^}"
	fi
	if [ `git branch --contains $BRANCH | grep master | wc -l` -eq 1 ]; then
	    git checkout -q master
	    git branch -q -d "$BRANCH"
	    echo "$RESOURCE_REF '$RESOURCE_NAME' closed.$SWITCH_ALERT"
	    trap "git checkout -q master" EXIT
	else
	    echo "$RESOURCE_REF '$RESOURCE_NAME' abandoned on origin. Local branch left intact. Please abandon or re-start."
	fi
    fi
    return 0
}
