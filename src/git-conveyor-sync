resource_usage() {
    if [ x"$1" != x"" ]; then
	echo $1 >&2
	echo >&2
    fi

    echo "usage:"
    echo "  con sync"
    echo "  con sync <repo URL> [<local repo dir>]"
    echo
    echo "Used to update (1st usage) or clone (2nd usage) a conveyor-workflow"
    echo "repository."
    echo
}

function action_check() {
    [ x"$1" == x"" ]
}

resource_do() {
    FLAGS_PARENT=""
    DEFINE_boolean allbranches false 'Attempts to synchronize all local branches.' ''
    FLAGS "$@" || exit $?
    eval set -- "${FLAGS_ARGV}"

    # First, let's determine whether we're in clone or update mode.
    if [ $# -eq 1 ] || [ $# -eq 2 ]; then # Clone it is.
	local REMOTE_URL="$1"; shift
	local LOCAL_DIR GIT_DIR EXIT ORIGINAL_BRANCH BRANCH_LIST BRANCH_PREFIXES RESULT
	if [ $# -eq 1 ]; then
	    LOCAL_DIR="$1"; shift
	fi

	# We don't support clones within repos, so let's make sure we're not
	# already in a repo.
	GIT_DIR=`git rev-parse --git-dir 2> /dev/null`
	# Test exits with code '128' if not a git directory. Otherwise, we
	# look for exceptional cases. Specifically, if we're running tests,
	# then we will be working under the conveyor-workflow repo, and that's
	# okay.
	if [[ $? -ne 128 && ( x"$GIT_CONVEY_TEST_MODE" != x"0" || x"$GIT_DIR" != x*conveyor/workflow/.git ) ]]; then
	    echo "Cannot clone a conveyor-workflow repo within an existing repo: '$GIT_DIR'." >&2
	    exit 1
	fi

	# Else, let's attempt the clone.
	if [ x"$LOCAL_DIR" == x"" ];then
	    do_clone $REMOTE_URL || (echo "ERROR: Could not clone $REMOTE_URL." >&2; exit 2) || exit 2	    
	else
	    do_clone $REMOTE_URL $LOCAL_DIR || (echo "ERROR: Could not clone $REMOTE_URL to $LOCAL_DIR." >&2; exit 2) || exit 2
	fi
    elif [ $# -eq 0 ]; then
	# With no arguments, we are updating the current repository. Make sure
	# we're in a repository.
	GIT_DIR=`git rev-parse --git-dir`
	if [ x"$GIT_DIR" == x"" ]; then
	    echo "Attempted update outside of git directory." >&2
	    exit 1
	fi
	# Now make sure that there are no uncommitted changes...
	git update-index -q --refresh
	EXIT=0
	if ! git diff-files --quiet --; then
	    echo "Found unstaged files in repo." >&2
	    EXIT=1
	fi
	if ! git diff-index --cached --quiet HEAD --; then
	    echo "Found uncommitted changes in the repo." >&2
	    EXIT=1
	fi
	if [ $EXIT -ne 0 ]; then
	    echo "Sync aborted." >&2
	    exit $EXIT
	fi
	# Okay, we are clean, time to move ahead.
	ORIGINAL_BRANCH=`get_current_branch`
	trap "git checkout -q $ORIGINAL_BRANCH" EXIT
	git fetch -p -q
	if [ $FLAGS_allbranches -ne $FLAGS_TRUE ]; then
	    update_branch "$ORIGINAL_BRANCH" "$ORIGINAL_BRANCH"
	else # attempt all branches
	    update_master "$ORIGINAL_BRANCH"
	    BRANCH_LIST="git for-each-ref --shell --format='%(refname:short)' refs/heads"
	    BRANCH_PREFIXES="topics- releases-"
	    for PREFIX in $BRANCH_PREFIXES; do
		for BRANCH in `$BRANCH_LIST/${PREFIX}*`; do
		    # Git spits out the branches quoted.
		    BRANCH="${BRANCH%\'\'}"
		    BRANCH="${BRANCH#\'\'}"
		    # This method takes care of communicating problems to the user.
		    update_branch "$BRANCH" "$ORIGINAL_BRANCH"
		done
	    done
	fi # '--allbranches' conditional
    else
	resource_usage "Unexpected arguments."
	exit 1
    fi # Top level clone / update check.

    echo "Sync complete."
}

function update_branch() {
    local BRANCH="$1"; shift
    local ORIGINAL_BRANCH="$1"; shift
    local CURRENT_BRANCH RESOURCE RESOURCE_SINGULAR RESOURCE_NAME RESOURCE_REF SWITCH_ALERT

    CURRENT_BRANCH=$(git symbolic-ref -q HEAD)
    CURRENT_BRANCH=${CURRENT_BRANCH##refs/heads/}
    CURRENT_BRANCH=${CURRENT_BRANCH:-HEAD}

    # TODO: do this with plumbing
    if [[ "$CURRENT_BRANCH" != "$BRANCH" ]] && ! git checkout -q $BRANCH; then
	echo "Very strange; found local branch '$BRANCH' but could not check it out for sync." >&2
	return 2
    fi
    if has_branch_origin "$BRANCH"; then # We sync with origin.
	if ! git pull -q origin $BRANCH; then
	    echo "Could not sync local branch '$BRANCH'. This may be due to network problems." >&2
	    return 2
	fi
    else # The branch does not exist on origin; closed or abandoned?
	# Remember, 'master' has already been synced.
	RESOURCE=`figure_resource_from_branch "$BRANCH"`
	RESOURCE_SINGULAR="${RESOURCE%s}"
	RESOURCE_NAME=`figure_resource_name_from_branch "$BRANCH"`
	RESOURCE_REF=""
	SWITCH_ALERT=""
	if [ x"$BRANCH" == x"$ORIGINAL_BRANCH" ]; then
	    RESOURCE_REF="Current ${RESOURCE_SINGULAR}"
	    SWITCH_ALERT=" Switched to master release."
	else
	    RESOURCE_REF="${RESOURCE_SINGULAR^}"
	fi
	# If we're not in 'allbranch' mode, master may not be updated.
	if [ `git rev-parse master` != `git rev-parse origin/master` ]; then
	    update_master "$ORIGINAL_BRANCH"
	fi
	if [ `git branch --contains $BRANCH | grep master | wc -l` -eq 1 ]; then
	    git checkout -q master
	    git branch -q -d "$BRANCH"
	    echo "$RESOURCE_REF '$RESOURCE_NAME' closed.$SWITCH_ALERT"
	    trap "git checkout -q master" EXIT
	else
	    echo "$RESOURCE_REF '$RESOURCE_NAME' abandoned on origin. Local branch left intact. Please abandon or re-start."
	fi
    fi
    return 0
}

function update_master() {
    local ORIGINAL_BRANCH="$1"; shift

    if ! update_branch master "$ORIGINAL_BRANCH"; then
	echo "Could not updated 'master' release branch. Bailing out." >&2
	exit 2
    fi
}
