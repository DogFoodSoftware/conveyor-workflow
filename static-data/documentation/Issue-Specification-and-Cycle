<div id="Ovierview" class="blurbSummary grid_12">
  <div class="p">
    The issue cycle defines the process of creating, managing, and closing
    issues. It is through this process that a project moves forward.
  </div>
</div>
<div id="Issue-Stages" class="blurbSummary grid_12">
  <div class="blurbTitle">Issue Stages</div>
  <div class="subHeader"><span>Creating an Issue</span></div>
  <div class="p">
    Project plannerss create issues. An issue may exist in the database in a
    partially initialized state, but is considered 'created' only after it is
    <a href="#Issue-Specification">fully specified</a>. Only created issues
    (but not all created issues) are considered available.
  </div>
  <div class="subHeader"><span>Involment Stage</span></div>
  <div class="p">
    An issue is said to be 'involved' when on or more <code>topics</code>
    references the issue as such.
  </div>
  <div class="subHeader"><span>Review Stage</span></div>
  <div class="p">
    Once an involved topic has been submitted, the issue is said to be under
    review.
  </div>
  <div class="subHeader"><span>Closing the Topic</span></div>
  <div class="p">
    Issues are automatically closed when an involved <code>topics</code>
    branch is accepted back to the source branch.
  </div>
</div><!-- #Issue-Stages -->
<div id="Issue-Specification" class="blurbSummary grid_12">
  <div class="blurbTitle">Issue Specification</div>
  <div class="p">
    In order to be considered fully specified, an issue must
    define <em>when</em> the issue needs to be tackled, <code>why</code> it
    needs to be done, and <em>what</em> needs to be
    done. Issues <em>should</em> when possible further specify the general
    work category, as defined by the particular project.
  </div>
  <div class="p">
    You may notice that the 'what' and 'how' are not specified by the
    issue. This is because these aspects are determined by the developer who
    takes the issue on, and not by the issue itself.
  </div>
  <div class="subHeader"><span>When</span></div>
  <div class="p">
    In the standard system, we define three possible values for 'when' an
    issue should be tackled: <code>now</code>, <code>whenever</code>,
    and <code>not yet</code>. While these <em>may</em> be modified we believe
    that for for most projects these will be will be sufficient.
  </div>
  <div class="p">
    <code>now</code> are the urgent items. <code>whenever</code> items are
    available for processing, but not urgent. Generally, workers are
    encouraged through structure and incentive to focus on <code>now</code>
    items over <code>whenever</code> items. <code>not yet</code> items are
    still being specified and are not themselves available for processing.
  </div>
  <div class="subHeader"><span>Why</span></div>
  <div class="p">
    Our 'why' model is simiarly simple and we again define three options:
    'bug', 'question', and 'change'. The 'why' gives us or second level
    ordering, to wit:
    <ol>
      <li>bugs <em>should</em> be addressed before</li>
      <li>questions <em>should</em> be answered before</li>
      <li>changes are implemented.</li> 
    </ol>
    Projects are free do define additional 'why' labels, but all why labels
    must map onto one of the three fundamental types.
  </div>
  <div data-perspective="detailed">
    Again, these three options may seem anemic compared to most systems, and
    again, the idea is that if you look at how issues are actually processed,
    you don't need anything more than this. Code correctness is always
    paramount and uncertaintity needs to be dispelled because changes should
    only be implemnted on stable code with clear direction.
  </div>
  <div class="subHeader"><span>Who</span></div>
  <div class="p">
    The 'who' is actually where it gets a bit more complicated. Also note that
    here, any custom types are considered distinct and are not mapped to the
    standard types here. In other words, whereas the standard 'when' and 'why'
    types are considered fundamental, the standard 'who' types are merely
    suggestive and may even be ammended and deleted for any given project.
  </div>
  <div data-perspective="detailed">
  </div>
  <div class="subHeader" data-perspective="detailed"><span>Custom When/Why/What Values</span></div>
  <div class="p" data-perspective="detailed">
    In general, custom when and why values <em>should</em> be avoided. We
    require that custom issues map onto one of the fundamental types so that
    general conveyor-flow logic can deal with them, and in practice we've
    never personally experienced a situation that, in our opinion, needs
    anything else. In practice, anything additional just introduces more
    cognitive load in issue specification without clear benefit.
  </div>
  <div class="p" data-perspective="detailed">
    'What' designations are often and properly extended. Again, if you don't
    need further details you shouldn't make difference for the sake of
    difference, but if you have more than type of 'code developer', for
    example, then you should designate the specific skills.
  </div>
  <div class="subHeader" data-perspective="operations detailed"><span>Technical Specification</span></div>
  <div class="p" data-perspective="operations detailed">
    The what, why, what designations are tracked by the folliwing labels:
    <ul>
      <li>when
	<ul>
	  <li><code>when: now</code></li>
	  <li><code>when: whenever</code></li>
	  <li><code>when: not yet</code></li>
	</ul>
      </li>
      <li>why
	<ul>
	  <li><code>why: bug</code></li>
	  <li><code>why: change</code></li>
	  <li><code>why: question</code></li>
	</ul>
      </li>
      <li>what
	<ul>
	  <li><code>who: user support writer</code></li>
	  <li><code>who: user direct support</code></li>
	  <li><code>who: technical designer</code></li>
	  <li><code>who: technical writer</code></li>

	  <li><code>who: code developer</code></li>

	  <li><code>who: ui designer</code></li>
	  <li><code>who: graphics and style</code></li>
	  <li><code>who: sysadmin</code></li>
	</ul>
      </li>
    </ul>
  </div>
</div><!-- #Topic-Specification -->
<div id="Non-Topics" class="blurbSummary grid_12" data-perspective="detailed">
  <div class="blurbTitle">Non-Topics</div>
  <div class="subHeader"><span>Priority and Value</span></div>
  <div class="p">
    Many readers may find the lack of any "priority" or "value" dimension
    surprising. In general, these are the most common and typically central
    attributes in issue management systems.
  </div>
  <div class="p">
    The problem with these attributes is that they are not immediately
    actionable. High priority / value issues may be delayed for valid
    reasons. It may make sense to firt tackle low value / priority issues that
    are also low hanging.
  </div>
  <div class="p">
    These values must be interpretted under some external set of rules which
    are not immediately obvious; that is, they require a-priori and ex-app
    knowledge. You need to the know the value to whom? Priority based on what?
  </div>
  <div class="p">
    In practice, a simple "when" is the better top level view. It's clear and
    gives clear direction to processors.
  </div>
</div><!-- #Non-Topics -->
