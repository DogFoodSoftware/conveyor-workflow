<div id="Ovierview" class="blurbSummary grid_12">
  <div class="p">
    The issue cycle defines the process of creating, managing, and closing
    issues. It is through this process that a project moves forward.
  </div>
</div>
<div id="Issue-Stages" class="blurbSummary grid_12">
  <div class="blurbTitle">Issue Stages</div>
  <div class="subHeader"><span>Creating an Issue</span></div>
  <div class="p">
    Project plannerss create issues. An issue may exist in the database in a
    partially initialized state, but is considered 'created' only after it is
    <a href="#Issue-Specification">fully specified</a>. Only created issues
    (but not all created issues) are considered available.
  </div>
  <div class="subHeader"><span>Involment Stage</span></div>
  <div class="p">
    An issue is said to be 'involved' when on or more <code>topics</code>
    references the issue as such.
  </div>
  <div class="subHeader"><span>Review Stage</span></div>
  <div class="p">
    Once an involved topic has been submitted, the issue is said to be under
    review.
  </div>
  <div class="subHeader"><span>Closing the Topic</span></div>
  <div class="p">
    Issues are automatically closed when an involved <code>topics</code>
    branch is accepted back to the source branch.
  </div>
</div><!-- #Issue-Stages -->
<div id="Issue-Specification" class="blurbSummary grid_12">
  <div class="blurbTitle">Issue Specification</div>
  <div class="p">
    In order to be considered fully specified (created), an issue must
    define <em>when</em> the issue needs to be tackled, <code>why</code>
    needs to be done, and <em>who</em> needs to do the
    doing. Issues <em>should</em> when possible further specify the general
    work category, as defined by the particular project.
  </div>
  <div class="p">
    You may notice that the 'what' and 'how' are not specified by the
    issue. This is because these aspects are determined by the developer who
    takes the issue on, and not by the issue itself.
  </div>
  <div class="subHeader"><span>When</span></div>
  <div class="p">
    In the standard system, we define three possible values for 'when' an
    issue should be tackled: now, whenever, and not yet. Individual projects
    are free to define further labels that carry meaning within the
    project. All labels must map onto one of these three fundamental types.
  </div>
  <div class="p">
    The 'not yet' designation is useful to mark issues which have been
    started, and may be fully specified, but are for whatever reason are not
    ready for implementation. Specifically, a developer <em>should</em> deal
    with 'now' issues before 'whenever' issues, but <em>must not</em> deal
    with 'not yet' issues.
  </div>
  <div class="p" data-perspective="detailed">
    The 'when' maps more or less onto the 'priority' and 'value' that you might
    find in other systems. The problem with a priority or value based model is
    that information isn't directly actionable. To be fair, the 'when' doesn't
    itself fully specify the 'optimal order of address' for issues, but it
    does give us a clear first order sort. Another way to say this is that
    it's much clearer how to extract priority from this first level ordering
    of 'when' than it is to go the other way.
  </div>
  <div class="p" data-perspective="detailed">
    'Value' based issue systems are somewhat better than priority, but in
    practice tend to get used in a way that again fails to give us a clear
    order of operations. The bigger problem with 'value' is the question of
    "value to whom?" Most often, this is taken as customer value, but this is
    problematic because it leads to development concerns being continually
    sidetracked in favor of user visible issues.
  </div>
  <div class="p" data-perspective="detailed">
    In practice, the 'when' designation is really what we want. It gives us
    clear next steps for the issues. Furthermore, the three categories turn
    out to be enough. In practice, developers shouldn't care about anything
    other than 'now' or 'later'. Whether or not an issue is 'critical',
    'high', 'medium', or 'low' priority is idea that planners may&mdash;and
    should&mdash;deal with, but as far as the issue life cycle goes, 'when'
    turns out to be far more useful.
  </div>
  <div class="subHeader"><span>Why</span></div>
  <div class="p">
    Our 'why' model is simiarly simple and we again define three options:
    'bug', 'question', and 'change'. The 'why' gives us or second level
    ordering, to wit:
    <ol>
      <li>bugs <em>should</em> be addressed before</li>
      <li>questions <em>should</em> be answered before</li>
      <li>changes are implemented.</li> 
    </ol>
    Projects are free do define additional 'why' labels, but all why labels
    must map onto one of the three fundamental types.
  </div>
  <div data-perspective="detailed">
    Again, these three options may seem anemic compared to most systems, and
    again, the idea is that if you look at how issues are actually processed,
    you don't need anything more than this. Code correctness is always
    paramount and uncertaintity needs to be dispelled because changes should
    only be implemnted on stable code with clear direction.
  </div>
  <div class="subHeader"><span>Who</span></div>
  <div class="p">
    The 'who' is actually where it gets a bit more complicated. Also note that
    here, any custom types are considered distinct and are not mapped to the
    standard types here. In other words, whereas the standard 'when' and 'why'
    types are considered fundamental, the standard 'who' types are merely
    suggestive and may even be ammended and deleted for any given project.
  </div>
  <div data-perspective="detailed">
  </div>
  <div class="subHeader" data-perspective="detailed"><span>Custom When/Why/Who Values</span></div>
  <div class="p" data-perspective="detailed">
    In general, custom when and why values <em>should</em> be avoided. We
    require that custom issues map onto one of the fundamental types so that
    general conveyor-flow logic can deal with them, and in practice we've
    never personally experienced a situation that, in our opinion, needs
    anything else. In practice, anything additional just introduces more
    cognitive load in issue specification without clear benefit.
  </div>
  <div class="p" data-perspective="detailed">
    'Who' designations are often and properly extended. Again, if you don't
    need further details you shouldn't make difference for the sake of
    difference, but if you have more than type of 'code developer', for
    example, then you should designate the specific skills.
  </div>
  <div class="subHeader" data-perspective="operations detailed"><span>Technical Specification</span></div>
  <div class="p" data-perspective="operations detailed">
    The what, why, who designations are tracked by the folliwing labels:
    <ul>
      <li><code>when: now</code></li>
      <li><code>when: whenever</code></li>
      <li><code>when: not yet</code></li>
      <li><code>why: bug</code></li>
      <li><code>why: change</code></li>
      <li><code>why: question</code></li>
      <li><code>who: user writer</code></li>
      <li><code>who: technical writer</code></li>
      <li><code>who: user advocate</code></li>
      <li><code>who: technical designer</code></li>
      <li><code>who: ui designer</code></li>
      <li><code>who: code developer</code></li>
      <li><code>who: graphics developer</code></li>
      <li><code>who: sysadmin</code></li>
    </ul>
  </div>
</div><!-- #Topic-Specification -->
